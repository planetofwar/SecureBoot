// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`

`include "prim_assert.sv"

module kmac_reg_top (
  input clk_i,
  input rst_ni,

  // Below Regster interface can be changed
  input  tlul_pkg::tl_h2d_t tl_i,
  output tlul_pkg::tl_d2h_t tl_o,

  // Output port for window
  output tlul_pkg::tl_h2d_t tl_win_o  [2],
  input  tlul_pkg::tl_d2h_t tl_win_i  [2],

  // To HW
  output kmac_reg_pkg::kmac_reg2hw_t reg2hw, // Write
  input  kmac_reg_pkg::kmac_hw2reg_t hw2reg, // Read

  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import kmac_reg_pkg::* ;

  localparam int AW = 12;
  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  tlul_pkg::tl_h2d_t tl_reg_h2d;
  tlul_pkg::tl_d2h_t tl_reg_d2h;

  tlul_pkg::tl_h2d_t tl_socket_h2d [3];
  tlul_pkg::tl_d2h_t tl_socket_d2h [3];

  logic [1:0] reg_steer;

  // socket_1n connection
  assign tl_reg_h2d = tl_socket_h2d[2];
  assign tl_socket_d2h[2] = tl_reg_d2h;

  assign tl_win_o[0] = tl_socket_h2d[0];
  assign tl_socket_d2h[0] = tl_win_i[0];
  assign tl_win_o[1] = tl_socket_h2d[1];
  assign tl_socket_d2h[1] = tl_win_i[1];

  // Create Socket_1n
  tlul_socket_1n #(
    .N          (3),
    .HReqPass   (1'b1),
    .HRspPass   (1'b1),
    .DReqPass   ({3{1'b1}}),
    .DRspPass   ({3{1'b1}}),
    .HReqDepth  (4'h0),
    .HRspDepth  (4'h0),
    .DReqDepth  ({3{4'h0}}),
    .DRspDepth  ({3{4'h0}})
  ) u_socket (
    .clk_i,
    .rst_ni,
    .tl_h_i (tl_i),
    .tl_h_o (tl_o),
    .tl_d_o (tl_socket_h2d),
    .tl_d_i (tl_socket_d2h),
    .dev_select_i (reg_steer)
  );

  // Create steering logic
  always_comb begin
    reg_steer = 2;       // Default set to register

    // TODO: Can below codes be unique case () inside ?
    if (tl_i.a_address[AW-1:0] >= 1024 && tl_i.a_address[AW-1:0] < 1536) begin
      reg_steer = 0;
    end
    if (tl_i.a_address[AW-1:0] >= 2048) begin
      // Exceed or meet the address range. Removed the comparison of limit addr 'h 1000
      reg_steer = 1;
    end
  end

  tlul_adapter_reg #(
    .RegAw(AW),
    .RegDw(DW)
  ) u_reg_if (
    .clk_i,
    .rst_ni,

    .tl_i (tl_reg_h2d),
    .tl_o (tl_reg_d2h),

    .we_o    (reg_we),
    .re_o    (reg_re),
    .addr_o  (reg_addr),
    .wdata_o (reg_wdata),
    .be_o    (reg_be),
    .rdata_i (reg_rdata),
    .error_i (reg_error)
  );

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err ;

  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic intr_state_kmac_done_qs;
  logic intr_state_kmac_done_wd;
  logic intr_state_kmac_done_we;
  logic intr_state_fifo_empty_qs;
  logic intr_state_fifo_empty_wd;
  logic intr_state_fifo_empty_we;
  logic intr_state_kmac_err_qs;
  logic intr_state_kmac_err_wd;
  logic intr_state_kmac_err_we;
  logic intr_enable_kmac_done_qs;
  logic intr_enable_kmac_done_wd;
  logic intr_enable_kmac_done_we;
  logic intr_enable_fifo_empty_qs;
  logic intr_enable_fifo_empty_wd;
  logic intr_enable_fifo_empty_we;
  logic intr_enable_kmac_err_qs;
  logic intr_enable_kmac_err_wd;
  logic intr_enable_kmac_err_we;
  logic intr_test_kmac_done_wd;
  logic intr_test_kmac_done_we;
  logic intr_test_fifo_empty_wd;
  logic intr_test_fifo_empty_we;
  logic intr_test_kmac_err_wd;
  logic intr_test_kmac_err_we;
  logic cfg_kmac_en_qs;
  logic cfg_kmac_en_wd;
  logic cfg_kmac_en_we;
  logic [2:0] cfg_strength_qs;
  logic [2:0] cfg_strength_wd;
  logic cfg_strength_we;
  logic [1:0] cfg_mode_qs;
  logic [1:0] cfg_mode_wd;
  logic cfg_mode_we;
  logic cfg_msg_endianness_qs;
  logic cfg_msg_endianness_wd;
  logic cfg_msg_endianness_we;
  logic cfg_state_endianness_qs;
  logic cfg_state_endianness_wd;
  logic cfg_state_endianness_we;
  logic cmd_start_wd;
  logic cmd_start_we;
  logic cmd_process_wd;
  logic cmd_process_we;
  logic cmd_run_wd;
  logic cmd_run_we;
  logic cmd_done_wd;
  logic cmd_done_we;
  logic status_sha3_idle_qs;
  logic status_sha3_idle_re;
  logic status_sha3_absorb_qs;
  logic status_sha3_absorb_re;
  logic status_sha3_squeeze_qs;
  logic status_sha3_squeeze_re;
  logic [4:0] status_fifo_depth_qs;
  logic status_fifo_depth_re;
  logic status_fifo_empty_qs;
  logic status_fifo_empty_re;
  logic status_fifo_full_qs;
  logic status_fifo_full_re;
  logic [31:0] key_0_wd;
  logic key_0_we;
  logic [31:0] key_1_wd;
  logic key_1_we;
  logic [31:0] key_2_wd;
  logic key_2_we;
  logic [31:0] key_3_wd;
  logic key_3_we;
  logic [31:0] key_4_wd;
  logic key_4_we;
  logic [31:0] key_5_wd;
  logic key_5_we;
  logic [31:0] key_6_wd;
  logic key_6_we;
  logic [31:0] key_7_wd;
  logic key_7_we;
  logic [31:0] key_8_wd;
  logic key_8_we;
  logic [31:0] key_9_wd;
  logic key_9_we;
  logic [31:0] key_10_wd;
  logic key_10_we;
  logic [31:0] key_11_wd;
  logic key_11_we;
  logic [31:0] key_12_wd;
  logic key_12_we;
  logic [31:0] key_13_wd;
  logic key_13_we;
  logic [31:0] key_14_wd;
  logic key_14_we;
  logic [31:0] key_15_wd;
  logic key_15_we;
  logic [9:0] key_len_wd;
  logic key_len_we;
  logic [31:0] prefix_0_qs;
  logic [31:0] prefix_0_wd;
  logic prefix_0_we;
  logic [31:0] prefix_1_qs;
  logic [31:0] prefix_1_wd;
  logic prefix_1_we;
  logic [31:0] prefix_2_qs;
  logic [31:0] prefix_2_wd;
  logic prefix_2_we;
  logic [31:0] prefix_3_qs;
  logic [31:0] prefix_3_wd;
  logic prefix_3_we;
  logic [31:0] prefix_4_qs;
  logic [31:0] prefix_4_wd;
  logic prefix_4_we;
  logic [31:0] prefix_5_qs;
  logic [31:0] prefix_5_wd;
  logic prefix_5_we;
  logic [31:0] prefix_6_qs;
  logic [31:0] prefix_6_wd;
  logic prefix_6_we;
  logic [31:0] prefix_7_qs;
  logic [31:0] prefix_7_wd;
  logic prefix_7_we;
  logic [31:0] prefix_8_qs;
  logic [31:0] prefix_8_wd;
  logic prefix_8_we;
  logic [31:0] prefix_9_qs;
  logic [31:0] prefix_9_wd;
  logic prefix_9_we;
  logic [31:0] prefix_10_qs;
  logic [31:0] prefix_10_wd;
  logic prefix_10_we;
  logic [31:0] err_code_qs;
  logic cfg_regwen_qs;
  logic cfg_regwen_re;

  // Register instances
  // R[intr_state]: V(False)

  //   F[kmac_done]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intr_state_kmac_done (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intr_state_kmac_done_we),
    .wd     (intr_state_kmac_done_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.kmac_done.de),
    .d      (hw2reg.intr_state.kmac_done.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.kmac_done.q ),

    // to register interface (read)
    .qs     (intr_state_kmac_done_qs)
  );


  //   F[fifo_empty]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intr_state_fifo_empty (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intr_state_fifo_empty_we),
    .wd     (intr_state_fifo_empty_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.fifo_empty.de),
    .d      (hw2reg.intr_state.fifo_empty.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.fifo_empty.q ),

    // to register interface (read)
    .qs     (intr_state_fifo_empty_qs)
  );


  //   F[kmac_err]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_intr_state_kmac_err (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intr_state_kmac_err_we),
    .wd     (intr_state_kmac_err_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.kmac_err.de),
    .d      (hw2reg.intr_state.kmac_err.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.kmac_err.q ),

    // to register interface (read)
    .qs     (intr_state_kmac_err_qs)
  );


  // R[intr_enable]: V(False)

  //   F[kmac_done]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intr_enable_kmac_done (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intr_enable_kmac_done_we),
    .wd     (intr_enable_kmac_done_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.kmac_done.q ),

    // to register interface (read)
    .qs     (intr_enable_kmac_done_qs)
  );


  //   F[fifo_empty]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intr_enable_fifo_empty (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intr_enable_fifo_empty_we),
    .wd     (intr_enable_fifo_empty_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.fifo_empty.q ),

    // to register interface (read)
    .qs     (intr_enable_fifo_empty_qs)
  );


  //   F[kmac_err]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_intr_enable_kmac_err (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (intr_enable_kmac_err_we),
    .wd     (intr_enable_kmac_err_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.kmac_err.q ),

    // to register interface (read)
    .qs     (intr_enable_kmac_err_qs)
  );


  // R[intr_test]: V(True)

  //   F[kmac_done]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_kmac_done (
    .re     (1'b0),
    .we     (intr_test_kmac_done_we),
    .wd     (intr_test_kmac_done_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.intr_test.kmac_done.qe),
    .q      (reg2hw.intr_test.kmac_done.q ),
    .qs     ()
  );


  //   F[fifo_empty]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_fifo_empty (
    .re     (1'b0),
    .we     (intr_test_fifo_empty_we),
    .wd     (intr_test_fifo_empty_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.intr_test.fifo_empty.qe),
    .q      (reg2hw.intr_test.fifo_empty.q ),
    .qs     ()
  );


  //   F[kmac_err]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_kmac_err (
    .re     (1'b0),
    .we     (intr_test_kmac_err_we),
    .wd     (intr_test_kmac_err_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.intr_test.kmac_err.qe),
    .q      (reg2hw.intr_test.kmac_err.q ),
    .qs     ()
  );


  // R[cfg]: V(False)

  //   F[kmac_en]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_cfg_kmac_en (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (cfg_kmac_en_we & cfg_regwen_qs),
    .wd     (cfg_kmac_en_wd),

    // from internal hardware
    .de     (hw2reg.cfg.kmac_en.de),
    .d      (hw2reg.cfg.kmac_en.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg.kmac_en.q ),

    // to register interface (read)
    .qs     (cfg_kmac_en_qs)
  );


  //   F[strength]: 3:1
  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_cfg_strength (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (cfg_strength_we & cfg_regwen_qs),
    .wd     (cfg_strength_wd),

    // from internal hardware
    .de     (hw2reg.cfg.strength.de),
    .d      (hw2reg.cfg.strength.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg.strength.q ),

    // to register interface (read)
    .qs     (cfg_strength_qs)
  );


  //   F[mode]: 5:4
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_cfg_mode (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (cfg_mode_we & cfg_regwen_qs),
    .wd     (cfg_mode_wd),

    // from internal hardware
    .de     (hw2reg.cfg.mode.de),
    .d      (hw2reg.cfg.mode.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg.mode.q ),

    // to register interface (read)
    .qs     (cfg_mode_qs)
  );


  //   F[msg_endianness]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_cfg_msg_endianness (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (cfg_msg_endianness_we & cfg_regwen_qs),
    .wd     (cfg_msg_endianness_wd),

    // from internal hardware
    .de     (hw2reg.cfg.msg_endianness.de),
    .d      (hw2reg.cfg.msg_endianness.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg.msg_endianness.q ),

    // to register interface (read)
    .qs     (cfg_msg_endianness_qs)
  );


  //   F[state_endianness]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_cfg_state_endianness (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface (qualified with register enable)
    .we     (cfg_state_endianness_we & cfg_regwen_qs),
    .wd     (cfg_state_endianness_wd),

    // from internal hardware
    .de     (hw2reg.cfg.state_endianness.de),
    .d      (hw2reg.cfg.state_endianness.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cfg.state_endianness.q ),

    // to register interface (read)
    .qs     (cfg_state_endianness_qs)
  );


  // R[cmd]: V(True)

  //   F[start]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_cmd_start (
    .re     (1'b0),
    .we     (cmd_start_we),
    .wd     (cmd_start_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.cmd.start.qe),
    .q      (reg2hw.cmd.start.q ),
    .qs     ()
  );


  //   F[process]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_cmd_process (
    .re     (1'b0),
    .we     (cmd_process_we),
    .wd     (cmd_process_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.cmd.process.qe),
    .q      (reg2hw.cmd.process.q ),
    .qs     ()
  );


  //   F[run]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_cmd_run (
    .re     (1'b0),
    .we     (cmd_run_we),
    .wd     (cmd_run_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.cmd.run.qe),
    .q      (reg2hw.cmd.run.q ),
    .qs     ()
  );


  //   F[done]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_cmd_done (
    .re     (1'b0),
    .we     (cmd_done_we),
    .wd     (cmd_done_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.cmd.done.qe),
    .q      (reg2hw.cmd.done.q ),
    .qs     ()
  );


  // R[status]: V(True)

  //   F[sha3_idle]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_sha3_idle (
    .re     (status_sha3_idle_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.sha3_idle.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (status_sha3_idle_qs)
  );


  //   F[sha3_absorb]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_sha3_absorb (
    .re     (status_sha3_absorb_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.sha3_absorb.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (status_sha3_absorb_qs)
  );


  //   F[sha3_squeeze]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_sha3_squeeze (
    .re     (status_sha3_squeeze_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.sha3_squeeze.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (status_sha3_squeeze_qs)
  );


  //   F[fifo_depth]: 12:8
  prim_subreg_ext #(
    .DW    (5)
  ) u_status_fifo_depth (
    .re     (status_fifo_depth_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.fifo_depth.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (status_fifo_depth_qs)
  );


  //   F[fifo_empty]: 14:14
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_fifo_empty (
    .re     (status_fifo_empty_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.fifo_empty.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (status_fifo_empty_qs)
  );


  //   F[fifo_full]: 15:15
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_fifo_full (
    .re     (status_fifo_full_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.fifo_full.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (status_fifo_full_qs)
  );



  // Subregister 0 of Multireg key
  // R[key_0]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_key_0 (
    .re     (1'b0),
    .we     (key_0_we),
    .wd     (key_0_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.key[0].qe),
    .q      (reg2hw.key[0].q ),
    .qs     ()
  );

  // Subregister 1 of Multireg key
  // R[key_1]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_key_1 (
    .re     (1'b0),
    .we     (key_1_we),
    .wd     (key_1_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.key[1].qe),
    .q      (reg2hw.key[1].q ),
    .qs     ()
  );

  // Subregister 2 of Multireg key
  // R[key_2]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_key_2 (
    .re     (1'b0),
    .we     (key_2_we),
    .wd     (key_2_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.key[2].qe),
    .q      (reg2hw.key[2].q ),
    .qs     ()
  );

  // Subregister 3 of Multireg key
  // R[key_3]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_key_3 (
    .re     (1'b0),
    .we     (key_3_we),
    .wd     (key_3_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.key[3].qe),
    .q      (reg2hw.key[3].q ),
    .qs     ()
  );

  // Subregister 4 of Multireg key
  // R[key_4]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_key_4 (
    .re     (1'b0),
    .we     (key_4_we),
    .wd     (key_4_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.key[4].qe),
    .q      (reg2hw.key[4].q ),
    .qs     ()
  );

  // Subregister 5 of Multireg key
  // R[key_5]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_key_5 (
    .re     (1'b0),
    .we     (key_5_we),
    .wd     (key_5_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.key[5].qe),
    .q      (reg2hw.key[5].q ),
    .qs     ()
  );

  // Subregister 6 of Multireg key
  // R[key_6]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_key_6 (
    .re     (1'b0),
    .we     (key_6_we),
    .wd     (key_6_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.key[6].qe),
    .q      (reg2hw.key[6].q ),
    .qs     ()
  );

  // Subregister 7 of Multireg key
  // R[key_7]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_key_7 (
    .re     (1'b0),
    .we     (key_7_we),
    .wd     (key_7_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.key[7].qe),
    .q      (reg2hw.key[7].q ),
    .qs     ()
  );

  // Subregister 8 of Multireg key
  // R[key_8]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_key_8 (
    .re     (1'b0),
    .we     (key_8_we),
    .wd     (key_8_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.key[8].qe),
    .q      (reg2hw.key[8].q ),
    .qs     ()
  );

  // Subregister 9 of Multireg key
  // R[key_9]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_key_9 (
    .re     (1'b0),
    .we     (key_9_we),
    .wd     (key_9_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.key[9].qe),
    .q      (reg2hw.key[9].q ),
    .qs     ()
  );

  // Subregister 10 of Multireg key
  // R[key_10]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_key_10 (
    .re     (1'b0),
    .we     (key_10_we),
    .wd     (key_10_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.key[10].qe),
    .q      (reg2hw.key[10].q ),
    .qs     ()
  );

  // Subregister 11 of Multireg key
  // R[key_11]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_key_11 (
    .re     (1'b0),
    .we     (key_11_we),
    .wd     (key_11_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.key[11].qe),
    .q      (reg2hw.key[11].q ),
    .qs     ()
  );

  // Subregister 12 of Multireg key
  // R[key_12]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_key_12 (
    .re     (1'b0),
    .we     (key_12_we),
    .wd     (key_12_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.key[12].qe),
    .q      (reg2hw.key[12].q ),
    .qs     ()
  );

  // Subregister 13 of Multireg key
  // R[key_13]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_key_13 (
    .re     (1'b0),
    .we     (key_13_we),
    .wd     (key_13_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.key[13].qe),
    .q      (reg2hw.key[13].q ),
    .qs     ()
  );

  // Subregister 14 of Multireg key
  // R[key_14]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_key_14 (
    .re     (1'b0),
    .we     (key_14_we),
    .wd     (key_14_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.key[14].qe),
    .q      (reg2hw.key[14].q ),
    .qs     ()
  );

  // Subregister 15 of Multireg key
  // R[key_15]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_key_15 (
    .re     (1'b0),
    .we     (key_15_we),
    .wd     (key_15_wd),
    .d      ('0),
    .qre    (),
    .qe     (reg2hw.key[15].qe),
    .q      (reg2hw.key[15].q ),
    .qs     ()
  );


  // R[key_len]: V(False)

  prim_subreg #(
    .DW      (10),
    .SWACCESS("WO"),
    .RESVAL  (10'h0)
  ) u_key_len (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (key_len_we),
    .wd     (key_len_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.key_len.q ),

    .qs     ()
  );



  // Subregister 0 of Multireg prefix
  // R[prefix_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_prefix_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prefix_0_we),
    .wd     (prefix_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.prefix[0].qe),
    .q      (reg2hw.prefix[0].q ),

    // to register interface (read)
    .qs     (prefix_0_qs)
  );

  // Subregister 1 of Multireg prefix
  // R[prefix_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_prefix_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prefix_1_we),
    .wd     (prefix_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.prefix[1].qe),
    .q      (reg2hw.prefix[1].q ),

    // to register interface (read)
    .qs     (prefix_1_qs)
  );

  // Subregister 2 of Multireg prefix
  // R[prefix_2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_prefix_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prefix_2_we),
    .wd     (prefix_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.prefix[2].qe),
    .q      (reg2hw.prefix[2].q ),

    // to register interface (read)
    .qs     (prefix_2_qs)
  );

  // Subregister 3 of Multireg prefix
  // R[prefix_3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_prefix_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prefix_3_we),
    .wd     (prefix_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.prefix[3].qe),
    .q      (reg2hw.prefix[3].q ),

    // to register interface (read)
    .qs     (prefix_3_qs)
  );

  // Subregister 4 of Multireg prefix
  // R[prefix_4]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_prefix_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prefix_4_we),
    .wd     (prefix_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.prefix[4].qe),
    .q      (reg2hw.prefix[4].q ),

    // to register interface (read)
    .qs     (prefix_4_qs)
  );

  // Subregister 5 of Multireg prefix
  // R[prefix_5]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_prefix_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prefix_5_we),
    .wd     (prefix_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.prefix[5].qe),
    .q      (reg2hw.prefix[5].q ),

    // to register interface (read)
    .qs     (prefix_5_qs)
  );

  // Subregister 6 of Multireg prefix
  // R[prefix_6]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_prefix_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prefix_6_we),
    .wd     (prefix_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.prefix[6].qe),
    .q      (reg2hw.prefix[6].q ),

    // to register interface (read)
    .qs     (prefix_6_qs)
  );

  // Subregister 7 of Multireg prefix
  // R[prefix_7]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_prefix_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prefix_7_we),
    .wd     (prefix_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.prefix[7].qe),
    .q      (reg2hw.prefix[7].q ),

    // to register interface (read)
    .qs     (prefix_7_qs)
  );

  // Subregister 8 of Multireg prefix
  // R[prefix_8]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_prefix_8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prefix_8_we),
    .wd     (prefix_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.prefix[8].qe),
    .q      (reg2hw.prefix[8].q ),

    // to register interface (read)
    .qs     (prefix_8_qs)
  );

  // Subregister 9 of Multireg prefix
  // R[prefix_9]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_prefix_9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prefix_9_we),
    .wd     (prefix_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.prefix[9].qe),
    .q      (reg2hw.prefix[9].q ),

    // to register interface (read)
    .qs     (prefix_9_qs)
  );

  // Subregister 10 of Multireg prefix
  // R[prefix_10]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_prefix_10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (prefix_10_we),
    .wd     (prefix_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.prefix[10].qe),
    .q      (reg2hw.prefix[10].q ),

    // to register interface (read)
    .qs     (prefix_10_qs)
  );


  // R[err_code]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_err_code (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.err_code.de),
    .d      (hw2reg.err_code.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (err_code_qs)
  );


  // R[cfg_regwen]: V(True)

  prim_subreg_ext #(
    .DW    (1)
  ) u_cfg_regwen (
    .re     (cfg_regwen_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.cfg_regwen.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (cfg_regwen_qs)
  );




  logic [35:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[ 0] = (reg_addr == KMAC_INTR_STATE_OFFSET);
    addr_hit[ 1] = (reg_addr == KMAC_INTR_ENABLE_OFFSET);
    addr_hit[ 2] = (reg_addr == KMAC_INTR_TEST_OFFSET);
    addr_hit[ 3] = (reg_addr == KMAC_CFG_OFFSET);
    addr_hit[ 4] = (reg_addr == KMAC_CMD_OFFSET);
    addr_hit[ 5] = (reg_addr == KMAC_STATUS_OFFSET);
    addr_hit[ 6] = (reg_addr == KMAC_KEY_0_OFFSET);
    addr_hit[ 7] = (reg_addr == KMAC_KEY_1_OFFSET);
    addr_hit[ 8] = (reg_addr == KMAC_KEY_2_OFFSET);
    addr_hit[ 9] = (reg_addr == KMAC_KEY_3_OFFSET);
    addr_hit[10] = (reg_addr == KMAC_KEY_4_OFFSET);
    addr_hit[11] = (reg_addr == KMAC_KEY_5_OFFSET);
    addr_hit[12] = (reg_addr == KMAC_KEY_6_OFFSET);
    addr_hit[13] = (reg_addr == KMAC_KEY_7_OFFSET);
    addr_hit[14] = (reg_addr == KMAC_KEY_8_OFFSET);
    addr_hit[15] = (reg_addr == KMAC_KEY_9_OFFSET);
    addr_hit[16] = (reg_addr == KMAC_KEY_10_OFFSET);
    addr_hit[17] = (reg_addr == KMAC_KEY_11_OFFSET);
    addr_hit[18] = (reg_addr == KMAC_KEY_12_OFFSET);
    addr_hit[19] = (reg_addr == KMAC_KEY_13_OFFSET);
    addr_hit[20] = (reg_addr == KMAC_KEY_14_OFFSET);
    addr_hit[21] = (reg_addr == KMAC_KEY_15_OFFSET);
    addr_hit[22] = (reg_addr == KMAC_KEY_LEN_OFFSET);
    addr_hit[23] = (reg_addr == KMAC_PREFIX_0_OFFSET);
    addr_hit[24] = (reg_addr == KMAC_PREFIX_1_OFFSET);
    addr_hit[25] = (reg_addr == KMAC_PREFIX_2_OFFSET);
    addr_hit[26] = (reg_addr == KMAC_PREFIX_3_OFFSET);
    addr_hit[27] = (reg_addr == KMAC_PREFIX_4_OFFSET);
    addr_hit[28] = (reg_addr == KMAC_PREFIX_5_OFFSET);
    addr_hit[29] = (reg_addr == KMAC_PREFIX_6_OFFSET);
    addr_hit[30] = (reg_addr == KMAC_PREFIX_7_OFFSET);
    addr_hit[31] = (reg_addr == KMAC_PREFIX_8_OFFSET);
    addr_hit[32] = (reg_addr == KMAC_PREFIX_9_OFFSET);
    addr_hit[33] = (reg_addr == KMAC_PREFIX_10_OFFSET);
    addr_hit[34] = (reg_addr == KMAC_ERR_CODE_OFFSET);
    addr_hit[35] = (reg_addr == KMAC_CFG_REGWEN_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = 1'b0;
    if (addr_hit[ 0] && reg_we && (KMAC_PERMIT[ 0] != (KMAC_PERMIT[ 0] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 1] && reg_we && (KMAC_PERMIT[ 1] != (KMAC_PERMIT[ 1] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 2] && reg_we && (KMAC_PERMIT[ 2] != (KMAC_PERMIT[ 2] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 3] && reg_we && (KMAC_PERMIT[ 3] != (KMAC_PERMIT[ 3] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 4] && reg_we && (KMAC_PERMIT[ 4] != (KMAC_PERMIT[ 4] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 5] && reg_we && (KMAC_PERMIT[ 5] != (KMAC_PERMIT[ 5] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 6] && reg_we && (KMAC_PERMIT[ 6] != (KMAC_PERMIT[ 6] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 7] && reg_we && (KMAC_PERMIT[ 7] != (KMAC_PERMIT[ 7] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 8] && reg_we && (KMAC_PERMIT[ 8] != (KMAC_PERMIT[ 8] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 9] && reg_we && (KMAC_PERMIT[ 9] != (KMAC_PERMIT[ 9] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[10] && reg_we && (KMAC_PERMIT[10] != (KMAC_PERMIT[10] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[11] && reg_we && (KMAC_PERMIT[11] != (KMAC_PERMIT[11] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[12] && reg_we && (KMAC_PERMIT[12] != (KMAC_PERMIT[12] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[13] && reg_we && (KMAC_PERMIT[13] != (KMAC_PERMIT[13] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[14] && reg_we && (KMAC_PERMIT[14] != (KMAC_PERMIT[14] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[15] && reg_we && (KMAC_PERMIT[15] != (KMAC_PERMIT[15] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[16] && reg_we && (KMAC_PERMIT[16] != (KMAC_PERMIT[16] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[17] && reg_we && (KMAC_PERMIT[17] != (KMAC_PERMIT[17] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[18] && reg_we && (KMAC_PERMIT[18] != (KMAC_PERMIT[18] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[19] && reg_we && (KMAC_PERMIT[19] != (KMAC_PERMIT[19] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[20] && reg_we && (KMAC_PERMIT[20] != (KMAC_PERMIT[20] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[21] && reg_we && (KMAC_PERMIT[21] != (KMAC_PERMIT[21] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[22] && reg_we && (KMAC_PERMIT[22] != (KMAC_PERMIT[22] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[23] && reg_we && (KMAC_PERMIT[23] != (KMAC_PERMIT[23] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[24] && reg_we && (KMAC_PERMIT[24] != (KMAC_PERMIT[24] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[25] && reg_we && (KMAC_PERMIT[25] != (KMAC_PERMIT[25] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[26] && reg_we && (KMAC_PERMIT[26] != (KMAC_PERMIT[26] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[27] && reg_we && (KMAC_PERMIT[27] != (KMAC_PERMIT[27] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[28] && reg_we && (KMAC_PERMIT[28] != (KMAC_PERMIT[28] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[29] && reg_we && (KMAC_PERMIT[29] != (KMAC_PERMIT[29] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[30] && reg_we && (KMAC_PERMIT[30] != (KMAC_PERMIT[30] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[31] && reg_we && (KMAC_PERMIT[31] != (KMAC_PERMIT[31] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[32] && reg_we && (KMAC_PERMIT[32] != (KMAC_PERMIT[32] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[33] && reg_we && (KMAC_PERMIT[33] != (KMAC_PERMIT[33] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[34] && reg_we && (KMAC_PERMIT[34] != (KMAC_PERMIT[34] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[35] && reg_we && (KMAC_PERMIT[35] != (KMAC_PERMIT[35] & reg_be))) wr_err = 1'b1 ;
  end

  assign intr_state_kmac_done_we = addr_hit[0] & reg_we & ~wr_err;
  assign intr_state_kmac_done_wd = reg_wdata[0];

  assign intr_state_fifo_empty_we = addr_hit[0] & reg_we & ~wr_err;
  assign intr_state_fifo_empty_wd = reg_wdata[1];

  assign intr_state_kmac_err_we = addr_hit[0] & reg_we & ~wr_err;
  assign intr_state_kmac_err_wd = reg_wdata[2];

  assign intr_enable_kmac_done_we = addr_hit[1] & reg_we & ~wr_err;
  assign intr_enable_kmac_done_wd = reg_wdata[0];

  assign intr_enable_fifo_empty_we = addr_hit[1] & reg_we & ~wr_err;
  assign intr_enable_fifo_empty_wd = reg_wdata[1];

  assign intr_enable_kmac_err_we = addr_hit[1] & reg_we & ~wr_err;
  assign intr_enable_kmac_err_wd = reg_wdata[2];

  assign intr_test_kmac_done_we = addr_hit[2] & reg_we & ~wr_err;
  assign intr_test_kmac_done_wd = reg_wdata[0];

  assign intr_test_fifo_empty_we = addr_hit[2] & reg_we & ~wr_err;
  assign intr_test_fifo_empty_wd = reg_wdata[1];

  assign intr_test_kmac_err_we = addr_hit[2] & reg_we & ~wr_err;
  assign intr_test_kmac_err_wd = reg_wdata[2];

  assign cfg_kmac_en_we = addr_hit[3] & reg_we & ~wr_err;
  assign cfg_kmac_en_wd = reg_wdata[0];

  assign cfg_strength_we = addr_hit[3] & reg_we & ~wr_err;
  assign cfg_strength_wd = reg_wdata[3:1];

  assign cfg_mode_we = addr_hit[3] & reg_we & ~wr_err;
  assign cfg_mode_wd = reg_wdata[5:4];

  assign cfg_msg_endianness_we = addr_hit[3] & reg_we & ~wr_err;
  assign cfg_msg_endianness_wd = reg_wdata[8];

  assign cfg_state_endianness_we = addr_hit[3] & reg_we & ~wr_err;
  assign cfg_state_endianness_wd = reg_wdata[9];

  assign cmd_start_we = addr_hit[4] & reg_we & ~wr_err;
  assign cmd_start_wd = reg_wdata[0];

  assign cmd_process_we = addr_hit[4] & reg_we & ~wr_err;
  assign cmd_process_wd = reg_wdata[1];

  assign cmd_run_we = addr_hit[4] & reg_we & ~wr_err;
  assign cmd_run_wd = reg_wdata[2];

  assign cmd_done_we = addr_hit[4] & reg_we & ~wr_err;
  assign cmd_done_wd = reg_wdata[3];

  assign status_sha3_idle_re = addr_hit[5] && reg_re;

  assign status_sha3_absorb_re = addr_hit[5] && reg_re;

  assign status_sha3_squeeze_re = addr_hit[5] && reg_re;

  assign status_fifo_depth_re = addr_hit[5] && reg_re;

  assign status_fifo_empty_re = addr_hit[5] && reg_re;

  assign status_fifo_full_re = addr_hit[5] && reg_re;

  assign key_0_we = addr_hit[6] & reg_we & ~wr_err;
  assign key_0_wd = reg_wdata[31:0];

  assign key_1_we = addr_hit[7] & reg_we & ~wr_err;
  assign key_1_wd = reg_wdata[31:0];

  assign key_2_we = addr_hit[8] & reg_we & ~wr_err;
  assign key_2_wd = reg_wdata[31:0];

  assign key_3_we = addr_hit[9] & reg_we & ~wr_err;
  assign key_3_wd = reg_wdata[31:0];

  assign key_4_we = addr_hit[10] & reg_we & ~wr_err;
  assign key_4_wd = reg_wdata[31:0];

  assign key_5_we = addr_hit[11] & reg_we & ~wr_err;
  assign key_5_wd = reg_wdata[31:0];

  assign key_6_we = addr_hit[12] & reg_we & ~wr_err;
  assign key_6_wd = reg_wdata[31:0];

  assign key_7_we = addr_hit[13] & reg_we & ~wr_err;
  assign key_7_wd = reg_wdata[31:0];

  assign key_8_we = addr_hit[14] & reg_we & ~wr_err;
  assign key_8_wd = reg_wdata[31:0];

  assign key_9_we = addr_hit[15] & reg_we & ~wr_err;
  assign key_9_wd = reg_wdata[31:0];

  assign key_10_we = addr_hit[16] & reg_we & ~wr_err;
  assign key_10_wd = reg_wdata[31:0];

  assign key_11_we = addr_hit[17] & reg_we & ~wr_err;
  assign key_11_wd = reg_wdata[31:0];

  assign key_12_we = addr_hit[18] & reg_we & ~wr_err;
  assign key_12_wd = reg_wdata[31:0];

  assign key_13_we = addr_hit[19] & reg_we & ~wr_err;
  assign key_13_wd = reg_wdata[31:0];

  assign key_14_we = addr_hit[20] & reg_we & ~wr_err;
  assign key_14_wd = reg_wdata[31:0];

  assign key_15_we = addr_hit[21] & reg_we & ~wr_err;
  assign key_15_wd = reg_wdata[31:0];

  assign key_len_we = addr_hit[22] & reg_we & ~wr_err;
  assign key_len_wd = reg_wdata[9:0];

  assign prefix_0_we = addr_hit[23] & reg_we & ~wr_err;
  assign prefix_0_wd = reg_wdata[31:0];

  assign prefix_1_we = addr_hit[24] & reg_we & ~wr_err;
  assign prefix_1_wd = reg_wdata[31:0];

  assign prefix_2_we = addr_hit[25] & reg_we & ~wr_err;
  assign prefix_2_wd = reg_wdata[31:0];

  assign prefix_3_we = addr_hit[26] & reg_we & ~wr_err;
  assign prefix_3_wd = reg_wdata[31:0];

  assign prefix_4_we = addr_hit[27] & reg_we & ~wr_err;
  assign prefix_4_wd = reg_wdata[31:0];

  assign prefix_5_we = addr_hit[28] & reg_we & ~wr_err;
  assign prefix_5_wd = reg_wdata[31:0];

  assign prefix_6_we = addr_hit[29] & reg_we & ~wr_err;
  assign prefix_6_wd = reg_wdata[31:0];

  assign prefix_7_we = addr_hit[30] & reg_we & ~wr_err;
  assign prefix_7_wd = reg_wdata[31:0];

  assign prefix_8_we = addr_hit[31] & reg_we & ~wr_err;
  assign prefix_8_wd = reg_wdata[31:0];

  assign prefix_9_we = addr_hit[32] & reg_we & ~wr_err;
  assign prefix_9_wd = reg_wdata[31:0];

  assign prefix_10_we = addr_hit[33] & reg_we & ~wr_err;
  assign prefix_10_wd = reg_wdata[31:0];


  assign cfg_regwen_re = addr_hit[35] && reg_re;

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = intr_state_kmac_done_qs;
        reg_rdata_next[1] = intr_state_fifo_empty_qs;
        reg_rdata_next[2] = intr_state_kmac_err_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[0] = intr_enable_kmac_done_qs;
        reg_rdata_next[1] = intr_enable_fifo_empty_qs;
        reg_rdata_next[2] = intr_enable_kmac_err_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[1] = '0;
        reg_rdata_next[2] = '0;
      end

      addr_hit[3]: begin
        reg_rdata_next[0] = cfg_kmac_en_qs;
        reg_rdata_next[3:1] = cfg_strength_qs;
        reg_rdata_next[5:4] = cfg_mode_qs;
        reg_rdata_next[8] = cfg_msg_endianness_qs;
        reg_rdata_next[9] = cfg_state_endianness_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[1] = '0;
        reg_rdata_next[2] = '0;
        reg_rdata_next[3] = '0;
      end

      addr_hit[5]: begin
        reg_rdata_next[0] = status_sha3_idle_qs;
        reg_rdata_next[1] = status_sha3_absorb_qs;
        reg_rdata_next[2] = status_sha3_squeeze_qs;
        reg_rdata_next[12:8] = status_fifo_depth_qs;
        reg_rdata_next[14] = status_fifo_empty_qs;
        reg_rdata_next[15] = status_fifo_full_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[7]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[8]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[9]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[10]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[11]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[12]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[13]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[14]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[15]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[16]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[17]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[18]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[19]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[20]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[21]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[22]: begin
        reg_rdata_next[9:0] = '0;
      end

      addr_hit[23]: begin
        reg_rdata_next[31:0] = prefix_0_qs;
      end

      addr_hit[24]: begin
        reg_rdata_next[31:0] = prefix_1_qs;
      end

      addr_hit[25]: begin
        reg_rdata_next[31:0] = prefix_2_qs;
      end

      addr_hit[26]: begin
        reg_rdata_next[31:0] = prefix_3_qs;
      end

      addr_hit[27]: begin
        reg_rdata_next[31:0] = prefix_4_qs;
      end

      addr_hit[28]: begin
        reg_rdata_next[31:0] = prefix_5_qs;
      end

      addr_hit[29]: begin
        reg_rdata_next[31:0] = prefix_6_qs;
      end

      addr_hit[30]: begin
        reg_rdata_next[31:0] = prefix_7_qs;
      end

      addr_hit[31]: begin
        reg_rdata_next[31:0] = prefix_8_qs;
      end

      addr_hit[32]: begin
        reg_rdata_next[31:0] = prefix_9_qs;
      end

      addr_hit[33]: begin
        reg_rdata_next[31:0] = prefix_10_qs;
      end

      addr_hit[34]: begin
        reg_rdata_next[31:0] = err_code_qs;
      end

      addr_hit[35]: begin
        reg_rdata_next[0] = cfg_regwen_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Assertions for Register Interface
  `ASSERT_PULSE(wePulse, reg_we)
  `ASSERT_PULSE(rePulse, reg_re)

  `ASSERT(reAfterRv, $rose(reg_re || reg_we) |=> tl_o.d_valid)

  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

  // this is formulated as an assumption such that the FPV testbenches do disprove this
  // property by mistake
  `ASSUME(reqParity, tl_reg_h2d.a_valid |-> tl_reg_h2d.a_user.parity_en == 1'b0)

endmodule
