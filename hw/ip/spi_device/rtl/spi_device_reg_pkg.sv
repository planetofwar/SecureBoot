// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package spi_device_reg_pkg;

// Register to internal design logic
typedef struct packed {

  struct packed {
    struct packed {
      logic q; // [160]
    } rxf;
    struct packed {
      logic q; // [159]
    } rxlvl;
    struct packed {
      logic q; // [158]
    } txlvl;
    struct packed {
      logic q; // [157]
    } rxerr;
  } intr_state;
  struct packed {
    struct packed {
      logic q; // [156]
    } rxf;
    struct packed {
      logic q; // [155]
    } rxlvl;
    struct packed {
      logic q; // [154]
    } txlvl;
    struct packed {
      logic q; // [153]
    } rxerr;
  } intr_enable;
  struct packed {
    struct packed {
      logic q; // [152]
      logic qe; // [151]
    } rxf;
    struct packed {
      logic q; // [150]
      logic qe; // [149]
    } rxlvl;
    struct packed {
      logic q; // [148]
      logic qe; // [147]
    } txlvl;
    struct packed {
      logic q; // [146]
      logic qe; // [145]
    } rxerr;
  } intr_test;
  struct packed {
    struct packed {
      logic q; // [144]
    } abort;
    struct packed {
      logic [1:0] q; // [143:142]
    } mode;
    struct packed {
      logic q; // [141]
    } rst_txfifo;
    struct packed {
      logic q; // [140]
    } rst_rxfifo;
  } control;
  struct packed {
    struct packed {
      logic q; // [139]
    } cpol;
    struct packed {
      logic q; // [138]
    } cpha;
    struct packed {
      logic q; // [137]
    } tx_order;
    struct packed {
      logic q; // [136]
    } rx_order;
    struct packed {
      logic [7:0] q; // [135:128]
    } timer_v;
  } cfg;
  struct packed {
    struct packed {
      logic [15:0] q; // [127:112]
    } rxlvl;
    struct packed {
      logic [15:0] q; // [111:96]
    } txlvl;
  } fifo_level;
  struct packed {
    struct packed {
      logic [15:0] q; // [95:80]
    } rptr;
  } rxf_ptr;
  struct packed {
    struct packed {
      logic [15:0] q; // [79:64]
    } wptr;
  } txf_ptr;
  struct packed {
    struct packed {
      logic [15:0] q; // [63:48]
    } base;
    struct packed {
      logic [15:0] q; // [47:32]
    } limit;
  } rxf_addr;
  struct packed {
    struct packed {
      logic [15:0] q; // [31:16]
    } base;
    struct packed {
      logic [15:0] q; // [15:0]
    } limit;
  } txf_addr;
} spi_device_reg2hw_t;

// Internal design logic to register
typedef struct packed {

  struct packed {
    struct packed {
      logic d;  // [62]
      logic de; // [61]
    } rxf;
    struct packed {
      logic d;  // [60]
      logic de; // [59]
    } rxlvl;
    struct packed {
      logic d;  // [58]
      logic de; // [57]
    } txlvl;
    struct packed {
      logic d;  // [56]
      logic de; // [55]
    } rxerr;
  } intr_state;
  struct packed {
    struct packed {
      logic [7:0] d; // [54:47]
    } rxlvl;
    struct packed {
      logic [7:0] d; // [46:39]
    } txlvl;
  } async_fifo_level;
  struct packed {
    struct packed {
      logic d;  // [38]
    } rxf_full;
    struct packed {
      logic d;  // [37]
    } rxf_empty;
    struct packed {
      logic d;  // [36]
    } txf_full;
    struct packed {
      logic d;  // [35]
    } txf_empty;
    struct packed {
      logic d;  // [34]
    } abort_done;
  } status;
  struct packed {
    struct packed {
      logic [15:0] d; // [33:18]
      logic de; // [17]
    } wptr;
  } rxf_ptr;
  struct packed {
    struct packed {
      logic [15:0] d; // [16:1]
      logic de; // [0]
    } rptr;
  } txf_ptr;
} spi_device_hw2reg_t;

  // Register Address
  parameter SPI_DEVICE_INTR_STATE_OFFSET = 12'h 0;
  parameter SPI_DEVICE_INTR_ENABLE_OFFSET = 12'h 4;
  parameter SPI_DEVICE_INTR_TEST_OFFSET = 12'h 8;
  parameter SPI_DEVICE_CONTROL_OFFSET = 12'h c;
  parameter SPI_DEVICE_CFG_OFFSET = 12'h 10;
  parameter SPI_DEVICE_FIFO_LEVEL_OFFSET = 12'h 14;
  parameter SPI_DEVICE_ASYNC_FIFO_LEVEL_OFFSET = 12'h 18;
  parameter SPI_DEVICE_STATUS_OFFSET = 12'h 1c;
  parameter SPI_DEVICE_RXF_PTR_OFFSET = 12'h 20;
  parameter SPI_DEVICE_TXF_PTR_OFFSET = 12'h 24;
  parameter SPI_DEVICE_RXF_ADDR_OFFSET = 12'h 28;
  parameter SPI_DEVICE_TXF_ADDR_OFFSET = 12'h 2c;

  // Window parameter
  parameter SPI_DEVICE_BUFFER_OFFSET = 12'h 800;
  parameter SPI_DEVICE_BUFFER_SIZE   = 12'h 800;

endpackage
